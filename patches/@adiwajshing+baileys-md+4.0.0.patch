diff --git a/node_modules/@adiwajshing/baileys-md/WABinary/Binary.js b/node_modules/@adiwajshing/baileys-md/WABinary/Binary.js
index c37e1eb..021bea0 100644
--- a/node_modules/@adiwajshing/baileys-md/WABinary/Binary.js
+++ b/node_modules/@adiwajshing/baileys-md/WABinary/Binary.js
@@ -242,20 +242,20 @@ module.exports.parseInt64OrThrow = j;
 module.exports.parseUint64OrThrow = W;
 
 class Binary {
-  /** @type {Uint8Array} */
-  buffer;
-  readEndIndex;
-  writeIndex;
-  bytesTrashed = 0;
-  earliestIndex = 0;
-  readIndex = 0;
-  /** @type {DataView} */
-  view = null;
-  littleEndian = false;
-  hiddenReads = 0;
-  hiddenWrites = 0;
-
   constructor(data = new Uint8Array(0), littleEndian = false) {
+    /** @type {Uint8Array} */
+    this.buffer;
+    this.readEndIndex;
+    this.writeIndex;
+    this.bytesTrashed = 0;
+    this.earliestIndex = 0;
+    this.readIndex = 0;
+    /** @type {DataView} */
+    this.view = null;
+    this.littleEndian = false;
+    this.hiddenReads = 0;
+    this.hiddenWrites = 0;
+
     if (data instanceof ArrayBuffer) {
       this.buffer = new Uint8Array(data);
       this.readEndIndex = data.byteLength;
@@ -269,6 +269,13 @@ class Binary {
     }
 
     this.littleEndian = littleEndian;
+    this.decompressed = () => {
+      if (2 & this.readUint8()) {
+          const result = inflateSync(this.readByteArray())
+          return new Binary(result)
+      }
+      return this
+    }
   }
 
   size() {
@@ -575,13 +582,6 @@ class Binary {
       (this.writeIndex = t), this.hiddenWrites || (this.readEndIndex = t), r
     );
   }
-  decompressed = () => {
-    if (2 & this.readUint8()) {
-        const result = inflateSync(this.readByteArray())
-        return new Binary(result)
-    }
-    return this
-  }
 }
 
 module.exports.Binary = Binary
diff --git a/node_modules/@adiwajshing/baileys-md/WASignalGroup/ciphertext_message.js b/node_modules/@adiwajshing/baileys-md/WASignalGroup/ciphertext_message.js
index f9bb771..491e9a2 100644
--- a/node_modules/@adiwajshing/baileys-md/WASignalGroup/ciphertext_message.js
+++ b/node_modules/@adiwajshing/baileys-md/WASignalGroup/ciphertext_message.js
@@ -1,16 +1,18 @@
 class CiphertextMessage {
-    UNSUPPORTED_VERSION = 1;
+  constructor() {
+    this.UNSUPPORTED_VERSION = 1;
 
-    CURRENT_VERSION = 3;
+    this.CURRENT_VERSION = 3;
 
-    WHISPER_TYPE = 2;
+    this.WHISPER_TYPE = 2;
 
-    PREKEY_TYPE = 3;
+    this.PREKEY_TYPE = 3;
 
-    SENDERKEY_TYPE = 4;
+    this.SENDERKEY_TYPE = 4;
 
-    SENDERKEY_DISTRIBUTION_TYPE = 5;
+    this.SENDERKEY_DISTRIBUTION_TYPE = 5;
 
-    ENCRYPTED_MESSAGE_OVERHEAD = 53;
+    this.ENCRYPTED_MESSAGE_OVERHEAD = 53;
+  }
 }
 module.exports = CiphertextMessage;
diff --git a/node_modules/@adiwajshing/baileys-md/WASignalGroup/sender_chain_key.js b/node_modules/@adiwajshing/baileys-md/WASignalGroup/sender_chain_key.js
index 9a3125b..cac2043 100644
--- a/node_modules/@adiwajshing/baileys-md/WASignalGroup/sender_chain_key.js
+++ b/node_modules/@adiwajshing/baileys-md/WASignalGroup/sender_chain_key.js
@@ -3,15 +3,15 @@ const SenderMessageKey = require('./sender_message_key');
 const crypto = require('libsignal/src/crypto');
 
 class SenderChainKey {
-  MESSAGE_KEY_SEED = Buffer.from([0x01]);
+  constructor(iteration, chainKey) {
+    this.MESSAGE_KEY_SEED = Buffer.from([0x01]);
 
-  CHAIN_KEY_SEED = Buffer.from([0x02]);
+    this.CHAIN_KEY_SEED = Buffer.from([0x02]);
 
-  iteration = 0;
+    this.iteration = 0;
 
-  chainKey = Buffer.alloc(0);
+    this.chainKey = Buffer.alloc(0);
 
-  constructor(iteration, chainKey) {
     this.iteration = iteration;
     this.chainKey = chainKey;
   }
diff --git a/node_modules/@adiwajshing/baileys-md/WASignalGroup/sender_key_message.js b/node_modules/@adiwajshing/baileys-md/WASignalGroup/sender_key_message.js
index 80683a6..7eb4526 100644
--- a/node_modules/@adiwajshing/baileys-md/WASignalGroup/sender_key_message.js
+++ b/node_modules/@adiwajshing/baileys-md/WASignalGroup/sender_key_message.js
@@ -3,8 +3,6 @@ const curve = require('libsignal/src/curve');
 const protobufs = require('./protobufs');
 
 class SenderKeyMessage extends CiphertextMessage {
-  SIGNATURE_LENGTH = 64;
-
   constructor(
     keyId = null,
     iteration = null,
@@ -12,6 +10,7 @@ class SenderKeyMessage extends CiphertextMessage {
     signatureKey = null,
     serialized = null
   ) {
+    this.SIGNATURE_LENGTH = 64;
     super();
     if (serialized) {
       const version = serialized[0];
diff --git a/node_modules/@adiwajshing/baileys-md/WASignalGroup/sender_key_record.js b/node_modules/@adiwajshing/baileys-md/WASignalGroup/sender_key_record.js
index e17f290..f1c1777 100644
--- a/node_modules/@adiwajshing/baileys-md/WASignalGroup/sender_key_record.js
+++ b/node_modules/@adiwajshing/baileys-md/WASignalGroup/sender_key_record.js
@@ -1,9 +1,8 @@
 const SenderKeyState = require('./sender_key_state');
 
 class SenderKeyRecord {
-    MAX_STATES = 5;
-  
     constructor(serialized) {
+      this.MAX_STATES = 5;
       this.senderKeyStates = [];
   
       if (serialized) {
diff --git a/node_modules/@adiwajshing/baileys-md/WASignalGroup/sender_key_state.js b/node_modules/@adiwajshing/baileys-md/WASignalGroup/sender_key_state.js
index c3e0fc9..8950f0e 100644
--- a/node_modules/@adiwajshing/baileys-md/WASignalGroup/sender_key_state.js
+++ b/node_modules/@adiwajshing/baileys-md/WASignalGroup/sender_key_state.js
@@ -4,8 +4,6 @@ const SenderMessageKey = require('./sender_message_key');
 const protobufs = require('./protobufs');
 
 class SenderKeyState {
-    MAX_MESSAGE_KEYS = 2000;
-
     constructor(
         id = null,
         iteration = null,
@@ -15,6 +13,8 @@ class SenderKeyState {
         signatureKeyPrivate = null,
         senderKeyStateStructure = null
     ) {
+        this.MAX_MESSAGE_KEYS = 2000;
+
         if (senderKeyStateStructure) {
             this.senderKeyStateStructure = senderKeyStateStructure;
         } else {
diff --git a/node_modules/@adiwajshing/baileys-md/WASignalGroup/sender_message_key.js b/node_modules/@adiwajshing/baileys-md/WASignalGroup/sender_message_key.js
index 7639704..cf136bc 100644
--- a/node_modules/@adiwajshing/baileys-md/WASignalGroup/sender_message_key.js
+++ b/node_modules/@adiwajshing/baileys-md/WASignalGroup/sender_message_key.js
@@ -1,14 +1,14 @@
 const { deriveSecrets } = require('libsignal/src/crypto');
 class SenderMessageKey {
-    iteration = 0;
+    constructor(iteration, seed) {
+        this.iteration = 0;
 
-    iv = Buffer.alloc(0);
+        this.iv = Buffer.alloc(0);
 
-    cipherKey = Buffer.alloc(0);
+        this.cipherKey = Buffer.alloc(0);
 
-    seed = Buffer.alloc(0);
+        this.seed = Buffer.alloc(0);
 
-    constructor(iteration, seed) {
         const derivative = deriveSecrets(seed, Buffer.alloc(32), Buffer.from('WhisperGroup'));
         const keys = new Uint8Array(32);
         keys.set(new Uint8Array(derivative[0].slice(16)));
